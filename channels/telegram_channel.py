"""
Telegram notification channel implementation.
"""

import requests
from typing import Dict, Any
from datetime import datetime
from .base_channel import BaseChannel
from config import Config

class TelegramChannel(BaseChannel):
    """Telegram bot notification channel."""
    
    def __init__(self, config: Dict[str, Any]):
        """Initialize Telegram channel."""
        super().__init__(config)
        self.bot_token = config.get('bot_token')
        self.chat_id = config.get('chat_id')
        self.parse_mode = config.get('parse_mode', Config.TELEGRAM_PARSE_MODE)
        self.disable_web_page_preview = config.get('disable_web_page_preview', Config.TELEGRAM_DISABLE_WEB_PAGE_PREVIEW)
    
    def validate_config(self) -> bool:
        """Validate Telegram configuration."""
        if not self.bot_token:
            logger.error("Telegram bot token not configured")
            return False
        if not self.chat_id:
            logger.error("Telegram chat ID not configured")
            return False
        return True
    
    def format_message(self, pressure_data: Dict[str, Any]) -> Dict[str, Any]:
        """Format pressure data for Telegram message."""
        # Create HTML formatted message
        message = f"⚠️ <b>Pressure Alert</b> ⚠️\n\n"
        message += f"<b>Pressure Drop:</b> {pressure_data['pressure_drop']:.1f} mmHg\n"
        message += f"<b>Current Pressure:</b> {pressure_data['current_pressure']:.1f} mmHg\n"
        message += f"<b>Minimum Expected:</b> {pressure_data['min_pressure']:.1f} mmHg\n"
        message += f"<b>Expected Time:</b> {pressure_data['min_pressure_time'].strftime('%Y-%m-%d %H:%M')}\n"
        message += f"<b>Threshold:</b> {pressure_data['threshold']} mmHg\n\n"
        message += f"<i>This alert was generated by the Pressure Monitor system.</i>"
        
        return {
            'text': message,
            'parse_mode': self.parse_mode,
            'disable_web_page_preview': self.disable_web_page_preview
        }
    
    def send_notification(self, pressure_data: Dict[str, Any]) -> bool:
        """Send notification via Telegram bot."""
        try:
            message_data = self.format_message(pressure_data)
            timeout = self.config.get('timeout', Config.WEBHOOK_TIMEOUT)
            
            # Telegram Bot API URL
            url = f"{Config.TELEGRAM_API_URL}{self.bot_token}/sendMessage"
            
            # Prepare payload
            payload = {
                'chat_id': self.chat_id,
                'text': message_data['text'],
                'parse_mode': message_data['parse_mode'],
                'disable_web_page_preview': message_data['disable_web_page_preview']
            }
            
            logger.info(f"Sending Telegram notification to chat {self.chat_id}...")
            response = requests.post(url, json=payload, timeout=timeout)
            response.raise_for_status()
            
            # Check Telegram API response
            result = response.json()
            if result.get('ok'):
                logger.info("Telegram notification sent successfully")
                return True
            else:
                logger.error(f"Telegram API error: {result.get('description', 'Unknown error')}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to send Telegram notification: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error sending Telegram notification: {e}")
            return False 